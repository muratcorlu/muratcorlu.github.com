<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: jquery | web development notes]]></title>
  <link href="http://muratcorlu.com/tags/jquery/atom.xml" rel="self"/>
  <link href="http://muratcorlu.com/"/>
  <updated>2012-07-12T10:44:13+03:00</updated>
  <id>http://muratcorlu.com/</id>
  <author>
    <name><![CDATA[Murat Çorlu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery'de ilk çalışma zamanını kısaltmak: lazyHandler]]></title>
    <link href="http://muratcorlu.com/post/jqueryde-ilk-calisma-zamanini-kisaltmak-lazyhandler/"/>
    <updated>2012-07-11T23:21:00+03:00</updated>
    <id>http://muratcorlu.com/post/jqueryde-ilk-calisma-zamanini-kisaltmak-lazyhandler</id>
    <content type="html"><![CDATA[<p>Javascript frameworkleri arasında neredeyse alternatifsiz kalan <a href="http://jquery.com">jQuery</a> frameworkünü kullanmayan-bilmeyen web geliştirici yoktur sanırım. jQuery'i bu kadar popüler yapan şey sanırım herşeyden önce çok başarılı olan CSS seçicisi(<a href="http://sizzlejs.com/">Sizzle</a>). Ancak oldukça eğlenceli olan CSS seçicisi kullanmak, fazla bonkör davranınca pek hoş sonuçlar doğurmuyor. Çok fazla etkileşim barındıran günümüz web sayfalarında, sayfa yüklenirken bir çok elemanın tıklama olayına Javascript metodları bağlıyoruz(event handling). İşte bu durumlarda dikkatli olunmazsa, sayfamızın yüklenme süreleri uzayabiliyor, kullanıcıların sabrı zorlanabiliyor.</p>

<h2>Sorun nedir?</h2>

<p>Olaylara fonksiyon atama işlemlerinde önemli bir süreyi CSS seçicileri çalıştırırken geçirebiliyoruz. Zira aşağıdaki tarzda bir seçiciden sayfa yükleme anında 10 tane çalıştırsak -HTML dokümanının büyüklüğüne ve tarayıcıya göre değişmekle birlikte- 200-300 milisaniye gibi bir süreyi sadece bu tarz olay dinleme atamaları ile geçirebiliriz:</p>

<p><div><script src='https://gist.github.com/3092755.js?file=default.js'></script>
<noscript><pre><code>$('#header li a.clickable').click(function);</code></pre></noscript></div>
</p>

<p>Burada her seçicide sadece ID kullanmak bir çözüm olabilir, zira ID ile eleman seçmek oldukça hızlı. Ancak karmaşıklaşan dokümanlarımızda ve artan etkileşim sayılarında, her elemana ID üretmek de başka dezavantajlara sebep olacaktır.</p>

<!--more-->


<h2>Seçiciyi sayfa yüklenirken değil, tıklama anında çalıştırsak?</h2>

<p>Aynı problemi <a href="http://www.sahibinden.com">sahibinden.com</a>'da geliştirme yaparken de yaşadık. Bir sayfada 8-10 tane elementin tıklamasına fonksiyon atadığımızda, eğer dokümanımız da biraz karmaşık ise, sayfanın ilk çalışma hızını(DOMReady) gözle görülür şekilde azaltıyorduk. Ve düşündüm ki, bu atadığımız 8-10 tıklama olayı, belki de çoğunlukla hiç kullanılmadan sayfadan çıkılıyordu. Yani, kullanılacağı garanti olmayan bir tıklama için kullanıcıyı sayfayı açarken fazladan 200 milisaniye daha bekletiyorduk.</p>

<p>Bu sıralarda okuduğum kullanıcı tecrübesi(user experience) ile ilgili bir kitapta şunlar yazıyordu:</p>

<blockquote><p>Araştırmalara göre, internette gezinen bir kullanıcı, bir linke tıkladığında 500 milisaniye ve altındaki beklemelere tepki vermiyor. Bu kadarlık bir süreyi "işlem yapma süresi" olarak görüyor ve bekliyor. Eğer 500 milisaniye ile 1 sn arasında herhangi bir tepki gelmezse, tıklamanın algılanmadığı tereddütü hasıl oluyor ve tekrar tıklıyor. 1 sn'yi geçen işlemlerde ise bir hata olduğuna hükmediyor. Bu yüzden 500 milisaniyeden daha uzun sürecek işlemlerde kullanıcıya işlemin devam ettiğiyle ilgili mutlaka bir bilgi verilmeli. Bu bir "yükleniyor" yazısı veya bunu ifade eden hareketli bir resim de olabilir.</p></blockquote>

<p>Bu bilgilerden de kuvvet alarak, sayfa yüklenirkenki bu süreyi, tıklama anına aktarmak için denemelere başladım ve ortaya paket haline getirdiğim <a href="https://github.com/muratcorlu/lazyHandler">lazyHandler eklentisi</a> çıktı.</p>

<h2>lazyHandler ne yapıyor?</h2>

<p>lazyHandler ile olay atamanın kullanımı alışılagelmiş jQuery olay atamasına benzer:</p>

<p><div><script src='https://gist.github.com/3092755.js?file=lazyhandler.js'></script>
<noscript><pre><code>$.lh('#header li a.clickable').click(function(event){
	console.log($(this).text());
});</code></pre></noscript></div>
</p>

<p>Görüldüğü üzere sadece 3 karakterlik bir eklemeyle alışılagelmiş bir jQuery olay atamasını, lazyHandler yöntemine çevirmiş olduk. Peki böyle yapınca ne değişti?:</p>

<p>Normal yöntemde bu kod çalıştığı anda "#header li a.clickable" CSS seçicisi çalışır, kurala uygun elementler dokümanda aranır ve bunların tıklama olaylarına bu fonksiyon atanırdı. lazyHandler yönteminde ise bu kodun çalışması sadece bir diziye(array) bu CSS seçicisinin ve fonksiyonun atanmasından ibaret oluyor(lazyHandler dokümanda ilk kez çağrılıyorsa dokümanın tıklama olayına da bir fonksiyon atanıyor). Daha sonra dokümanın herhangi bir yerine tıklandığında, bu dizideki CSS seçicilerin tıklanan bölgedeki eleman(lar)a uyup uymadığı kontrol ediliyor ve uyan durumlarda karşılığındaki fonksiyon çağrılıyor.</p>

<h2>Ne faydası var?</h2>

<p>Olay atamalarının bu yöntemle yapılması sayfa yüklenirken çalıştırdığınız olay ataması sayısı arttıkça faydasını daha çok gösteriyor. Çünkü bir CSS seçicinin çalışması 10 ms sürüyorsa ve bu şekilde 10 CSS seçici çalıştırıyorsanız, bu işlemleri lazyHandler ile yaptığınızda 99 ms kâra geçiyorsunuz, zira lazyHandler ile bu işlemi yapmak -yaklaşık- 1 ms sürüyor.</p>

<p>Aradaki farkı daha belirgin şekilde göstermek için hazırladığım bir <a href="http://jsperf.com/jquery-lazyhandler-performance-comparison">benchmark</a>ı da inceleyebilirsiniz.</p>

<h2>Dezavantajı yok mu?</h2>

<ul>
<li>lazyHandler ile atanan olaylar, dokümana her tıklamada -atanan olay sayısına bağlı olmakla birlikte- 50-60 milisaniyeye kadar ek süre getiriyor. Bunu şu ana kadarki kullanımlarımızda hiç problem etmedik.</li>
<li>lazyHandler olayları dokümana atanarak dinlendiği için, mouseover, mouseenter vb. fare hareketlerini dinlemek için uygun bir yöntem değil. Belki klavye tuşlarını dinlemek için de kullanılabilir.</li>
<li>lazyHandler <a href="http://www.quirksmode.org/js/events_order.html">bubbling</a>'i desteklemiyor. Dolayısıyla aynı kurala uyan iki elemanın içiçe olduğu durumlarda, fonksiyon sadece içteki element için çalıştırılıyor.</li>
<li>Bunların yanında lazyHandler seçicilerde <a href="http://api.jquery.com/jQuery/#selector-context">context</a> verilmesini de şu anda desteklemiyor.</li>
</ul>


<h2>Sonuç</h2>

<p>Bu kodu sahibinden.com'un bazı bölgelerinde 2 yıldır kullanıyoruz. Bu kadar zamandır lazyHandler'dan bahsetmeyi önce erteledim, sonrasında da unuttum veya vakit bulamadım. Bu yazıya gelen geri dönüşlerle bu konuda daha faydalı şeylerin ortaya çıkacağını umuyorum. Yorumlarınızı bekliyorum.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disqus yorumlarının görünür olduklarında yüklenmesi]]></title>
    <link href="http://muratcorlu.com/post/disqus-yorumlarinin-gorunur-olduklarinda-yuklenmesi/"/>
    <updated>2012-04-03T11:26:00+03:00</updated>
    <id>http://muratcorlu.com/post/disqus-yorumlarinin-gorunur-olduklarinda-yuklenmesi</id>
    <content type="html"><![CDATA[<p><a href="http://disqus.com">Disqus</a>, artık bir çok blogda kullanılan çok başarılı bir yorumlama hizmeti. Özellikle statik blogların yaygınlaştığı günümüzde, dinamik üretilmeyen sayfalarda bile yorum yazılabilmesi imkanı verdiği için hayat kurtarıcı bir çözüm.</p>

<p>Disqus'ın sunduğu javascript kodunu kullandığınızda sayfa yüklenirken yorumların olacağı yere gelindiğinde Disqus tarafından sunulan javascript dosyası yükleniyor ve bu dosya ihtiyaç duyduğu dosyaları da yükletip, yorumları sayfaya ekliyor. Bloglarda genelde bir yazı açıldığında yazının uzunluğundan dolayı yorumlar ilk anda görüntüde olmuyorlar. Ancak bu geleneksel yöntemimizde birşeyi değiştirmiyor ve görüntüde olmamasına rağmen yorumlar sayfa açılırken yükleniyor. İçinde başka öğelerin de bulunduğu(videolar, resimler ve başka javascriptler) uzun yazılı blog sayfalarını açarken, görüntüde olmadığı halde Disqus yorumlarının da ilk açılışta yükleniyor olması hissedilir bir yük oluşturuyor. İşte buna çözüm olarak, <a href="http://jquery.com">jQuery</a> kütüphanesinden ve Mike Green'in <a href="http://www.myatus.com/2011/03/20/lazy-loading-disqus-in-wordpress/">bir yazısı</a>ndan faydalanarak yazdığım aşağıdaki javascript dosyası ve HTML5'in data attribute özelliğinden faydalandığım aşağıdaki gibi bir HTML yazımı ile Disqus yorumlarını kullanıcı sayfayı yorumların olduğu bölümlere kaydırdığı anda yükletebilirsiniz:</p>

<p><div><script src='https://gist.github.com/2290198.js?file='></script>
<noscript><pre><code>/**
 * Load disqus comments when visitor scroll down page to comments
 * 
 * Usage:
 * Add a div with id &quot;disqus_thread&quot; and data attributes for every disqus parameter:
 *
 * &lt;div id=&quot;disqus_thread&quot; data-disqus-shortname=&quot;username&quot; data-disqus-url=&quot;http://example.com/post/post-name/&quot;&gt;&lt;/div&gt;
 *
 * @author: Murat Corlu
 * @link: https://gist.github.com/gists/2290198
 */
$(function(){
    var disqus_div = $(&quot;#disqus_thread&quot;);
    if (disqus_div.size() &gt; 0 ) {
        var ds_loaded = false,
            top = disqus_div.offset().top, // WHERE TO START LOADING
            disqus_data = disqus_div.data();

        function check(){
            if ( !ds_loaded &amp;&amp; $(window).scrollTop() + $(window).height() &gt; top ) {
                ds_loaded = true;
                for (key in disqus_data) {
                    if (key.substr(0,6) == 'disqus') {
                        window['disqus_' + key.replace('disqus','').toLowerCase()] = disqus_data[key];
                    }
                }

                (function() {
                    var dsq = document.createElement('script'); 
                    dsq.type = 'text/javascript';
                    dsq.async = true;
                    dsq.src = 'http://' + window.disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }

        $(window).scroll(check);
        check();
    }
});</code></pre></noscript></div>
</p>

<p>HTML5 ile gelen data attribute'ları bu tür ihtiyaçlar için biçilmiş kaftan. Ancak eğer HTML dokümanlarınızı HTML5 tipinde deklare etmiyorsanız bu attribute'ları kullanmak dosyanızın validasyonunu bozacaktır. Bunun yanında normalde IE7'nin data attribute desteği olmamasına rağmen jQuery bu problemi çözmektedir.</p>

<p>Bu çözümü şu anki blog üretme motorum olan <a href="http://octopress.org">Octopress</a>'de nasıl uyguladığımı görmek isterseniz Github'daki bu iş için yaptığım değişikliklerden ibaret olan <a href="https://github.com/muratcorlu/muratcorlu.github.com/commit/381b1eb24292db1436d83deeeacdceca836e901c">commitimi</a> inceleyebilirsiniz.</p>
]]></content>
  </entry>
  
</feed>
